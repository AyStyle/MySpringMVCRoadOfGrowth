<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
">
    
    <!-- 开启controller注解扫描 -->
    <context:component-scan base-package="ankang.springmvc.learn.controller"/>
    
    <!--
        配置mvc注解驱动：
            处理器映射器，处理器适配器
            处理器映射器，处理器适配器都有默认值，
            但建议引入自动注册最合适处理器映射器，处理器适配器。
    -->
    <!-- 绑定自定义类型转换器 -->
    <mvc:annotation-driven conversion-service="conversionServiceFactoryBean"/>
    
    <!-- 注册自定义的SpringMVC类型转换器 -->
    <bean id="conversionServiceFactoryBean" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!-- conversions存放自定义的类型转换器 -->
        <property name="converters">
            <set>
                <bean class="ankang.springmvc.learn.converter.DateConverter"/>
            </set>
        </property>
    </bean>
    <!--
        静态资源配置，方案一：
            添加该标签之后，会在SpringMvc上下文中定义一个DefaultServletHttpRequestHandler对象。
            该对象会对进入DispatcherServlet的url请求进行过滤筛查，
            如果发现是静态资源请求，那么会将请求转由web应用服务器（Tomcat）默认的DefaultServlet来处理
            如果发现不是静态资源请求，那么继续由SpringMVC框架处理
       缺点：
            不能将静态资源放到resources目录和WEB-INF目录下
    -->
    <!--    <mvc:default-servlet-handler/>-->
    
    <!--
        静态资源配置，方案二：
            SpringMVC框架自己处理静态资源
            mapping：静态资源映射url
            location：静态资源存放位置
    -->
    <mvc:resources mapping="/resources/**" location="classpath:/"/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/js/"/>
    
    <!-- 配置SpringMVC视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <constructor-arg name="prefix" value="/jsp/"/>
        <constructor-arg name="suffix" value=".jsp"/>
    </bean>
    
    <!--
        注册拦截器：
            拦截器是SpringMVC、Struts等表现层框架自己的，不会拦截Request的访问资源，只会拦截访问的控制器方法
      
            在Handler业务逻辑执行之前拦截一次
            在Handler逻辑执行完毕，但未跳转页面之前拦截一次
            在跳转页面之后拦截一次
    -->
    <mvc:interceptors>
        <!-- 默认拦截所有的handler -->
        <!--        <bean class="ankang.springmvc.learn.interceptor.MyInterceptor01"/>-->
        
        <!-- 按配置拦截 -->
        <mvc:interceptor>
            <!--
                配置拦截url的规则：
                    **代表递归子目录
             -->
            <mvc:mapping path="/**"/>
            <!-- 在mvc:mapping的基础上，配置排除url的规则（不拦截的url） -->
            <!--            <mvc:exclude-mapping path="/demo/**"/>-->
            <bean class="ankang.springmvc.learn.interceptor.MyInterceptor01"/>
        </mvc:interceptor>
        
        <!--
            多个拦截器，方法执行顺序：
                preHandle：按照mvc:interceptor配置顺序执行
                postHandle：按照mvc:interceptor配置倒序执行
                afterCompletion：按照mvc:interceptor配置倒序执行
         -->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <!--            <mvc:exclude-mapping path="/demo/**"/>-->
            <bean class="ankang.springmvc.learn.interceptor.MyInterceptor02"/>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>